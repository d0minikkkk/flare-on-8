// Decoded gob 1

//Types
// type ID: 69
type Instruction struct {
	Opcode int64
	A0 int64
	A1 int64
	A2 int64
	Bm int64
	Cond int64
}

// type ID: 72
type ROM struct {
	A0 int64
	A1 int64
	Data []int
}

// type ID: 73
type []int []int64

// type ID: 75
type RAM struct {
	A0 int64
	A1 int64
	Data []int
}

// type ID: 67
type OutputDevice struct {
	Name string
}

// type ID: 66
type InputDevice struct {
	Name string
}

// type ID: 68
type Cpu struct {
	Acc int64
	Dat int64
	Pc int64
	Cond int64
	Instructions []vm.Instruction
}

// type ID: 70
type []vm.Instruction []Instruction

// type ID: 74
type []vm.ROM []ROM

// type ID: 76
type []vm.RAM []RAM

// type ID: 77
type Link struct {
	LHDevice int64
	LHReg int64
	RHDevice int64
	RHReg int64
}

// type ID: 65
type Program struct {
	Magic int64
	Input InputDevice
	Output OutputDevice
	Cpus []vm.Cpu
	ROMs []vm.ROM
	RAMs []vm.RAM
	Links []vm.Link
}

// type ID: 71
type []vm.Cpu []Cpu

// type ID: 78
type []vm.Link []Link

// Value: Program{Magic: 4919, Input: InputDevice{Name: ""}, Output: OutputDevice{Name: ""}, Cpus: []Cpu{Cpu{Acc: 0, Dat: 0, Pc: 0, Cond: 0, Instructions: []Instruction{Instruction{Opcode: 1, A0: 0, A1: 4, A2: 0, Bm: 3, Cond: 0}, Instruction{Opcode: 5, A0: 4, A1: -1, A2: 0, Bm: 1, Cond: 0}, Instruction{Opcode: 1, A0: -1, A1: 1, A2: 0, Bm: 2, Cond: 1}, Instruction{Opcode: 1, A0: 0, A1: 4, A2: 0, Bm: 3, Cond: 1}, Instruction{Opcode: 1, A0: 4, A1: 2, A2: 0, Bm: 3, Cond: 0}, Instruction{Opcode: 1, A0: 2, A1: 4, A2: 0, Bm: 3, Cond: 0}, Instruction{Opcode: 1, A0: 4, A1: 1, A2: 0, Bm: 3, Cond: 0}}}, Cpu{Acc: 0, Dat: 0, Pc: 0, Cond: 0, Instructions: []Instruction{Instruction{Opcode: 1, A0: 0, A1: 4, A2: 0, Bm: 3, Cond: 0}, Instruction{Opcode: 18, A0: 162, A1: 0, A2: 0, Bm: 0, Cond: 0}, Instruction{Opcode: 1, A0: 4, A1: 0, A2: 0, Bm: 3, Cond: 0}}}}, ROMs: []ROM{}, RAMs: []RAM{}, Links: []Link{Link{LHDevice: 0, LHReg: 0, RHDevice: 2, RHReg: 0}, Link{LHDevice: 2, LHReg: 1, RHDevice: 1, RHReg: 0}, Link{LHDevice: 2, LHReg: 2, RHDevice: 3, RHReg: 0}}}

// End gob 1
